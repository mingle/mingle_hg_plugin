--- !ruby/object:RI::MethodDescription 
visibility: public
block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: 'Returns true if a record exists in the table that matches the <tt>id</tt>
    or conditions given, or false otherwise. The argument can take five forms:'
- !ruby/object:SM::Flow::LIST 
  type: :BULLET
  contents: 
  - !ruby/struct:SM::Flow::LI 
    body: Integer - Finds the record with this primary key.
    label: '*'
  - !ruby/struct:SM::Flow::LI 
    body: String - Finds the record with a primary key corresponding to this string
      (such as <tt>'5'</tt>).
    label: '*'
  - !ruby/struct:SM::Flow::LI 
    body: Array - Finds the record that matches these <tt>find</tt>-style conditions
      (such as <tt>['color = ?', 'red']</tt>).
    label: '*'
  - !ruby/struct:SM::Flow::LI 
    body: Hash - Finds the record that matches these <tt>find</tt>-style conditions
      (such as <tt>{:color =&gt; 'red'}</tt>).
    label: '*'
  - !ruby/struct:SM::Flow::LI 
    body: No args - Returns false if the table is empty, true otherwise.
    label: '*'
- !ruby/struct:SM::Flow::P 
  body: For more information about specifying conditions as a Hash or Array, see the
    Conditions section in the introduction to ActiveRecord::Base.
- !ruby/struct:SM::Flow::P 
  body: 'Note: You can''t pass in a condition as a string (like <tt>name = ''Jamie''</tt>),
    since it would be sanitized and then queried against the primary key column, like
    <tt>id = ''name = \''Jamie\''''</tt>.'
- !ruby/struct:SM::Flow::H 
  text: Examples
  level: 4
- !ruby/struct:SM::Flow::VERB 
  body: "  Person.exists?(5)\n  Person.exists?('5')\n  Person.exists?(:name =&gt; \
    &quot;David&quot;)\n  Person.exists?(['name LIKE ?', &quot;%#{query}%&quot;])\n\
    \  Person.exists?\n"
full_name: ActiveRecord::Base::exists?
params: (id_or_conditions = {})
name: exists?
is_singleton: true
aliases: []


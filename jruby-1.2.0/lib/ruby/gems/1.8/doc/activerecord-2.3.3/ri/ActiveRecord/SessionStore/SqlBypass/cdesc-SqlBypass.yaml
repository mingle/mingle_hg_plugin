--- !ruby/object:RI::ClassDescription 
includes: []

comment: 
- !ruby/struct:SM::Flow::P 
  body: A barebones session store which duck-types with the default session store
    but bypasses Active Record and issues SQL directly. This is an example session
    model class meant as a basis for your own classes.
- !ruby/struct:SM::Flow::P 
  body: The database connection, table name, and session id and data columns are configurable
    class attributes. Marshaling and unmarshaling are implemented as class methods
    that you may override. By default, marshaling data is
- !ruby/struct:SM::Flow::VERB 
  body: "  ActiveSupport::Base64.encode64(Marshal.dump(data))\n"
- !ruby/struct:SM::Flow::P 
  body: and unmarshaling data is
- !ruby/struct:SM::Flow::VERB 
  body: "  Marshal.load(ActiveSupport::Base64.decode64(data))\n"
- !ruby/struct:SM::Flow::P 
  body: This marshaling behavior is intended to store the widest range of binary session
    data in a <tt>text</tt> column. For higher performance, store in a <tt>blob</tt>
    column instead and forgo the Base64 encoding.
attributes: 
- !ruby/object:RI::Attribute 
  comment: 
  rw: W
  name: data
- !ruby/object:RI::Attribute 
  comment: 
  rw: R
  name: session_id
instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: data
- !ruby/object:RI::MethodSummary 
  name: destroy
- !ruby/object:RI::MethodSummary 
  name: loaded?
- !ruby/object:RI::MethodSummary 
  name: new_record?
- !ruby/object:RI::MethodSummary 
  name: save
class_methods: 
- !ruby/object:RI::MethodSummary 
  name: connection
- !ruby/object:RI::MethodSummary 
  name: create_table!
- !ruby/object:RI::MethodSummary 
  name: drop_table!
- !ruby/object:RI::MethodSummary 
  name: find_by_session_id
- !ruby/object:RI::MethodSummary 
  name: marshal
- !ruby/object:RI::MethodSummary 
  name: new
- !ruby/object:RI::MethodSummary 
  name: unmarshal
full_name: ActiveRecord::SessionStore::SqlBypass
constants: []

superclass: Object
name: SqlBypass
